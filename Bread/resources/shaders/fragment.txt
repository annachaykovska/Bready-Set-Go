#version 330 core

struct Material
{
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

	float shininess;
	float opacity;
	float refractiveIndex;
};

struct Light
{
	vec3 position;
	vec3 direction;
	
	vec3 color;
	
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

	float constant;
	float linear;
	float quadratic;
};

out vec4 fragColor;

in vec2 ourTexCoord;
in vec3 ourNormal;
in vec3 fragPos;
in vec4 fragPosLightSpace;
in vec4 roughFragPosLightSpace;

uniform sampler2D texture_diffuse1;
uniform sampler2D texture_diffuse2;
uniform sampler2D texture_diffuse3;
uniform sampler2D texture_specular1;
uniform sampler2D texture_specular2;
uniform sampler2D texture_specular3;
uniform int textured;

uniform sampler2D shadowMap;
uniform sampler2D roughShadowMap;

uniform vec3 viewPos;
uniform Material material;
uniform Light light;

vec3 dirLight()
{
	// Ambient light
	float ambientStrength = 0.3;
	vec3 ambient = light.ambient * material.ambient;

	// Diffuse light
	vec3 norm = normalize(ourNormal);
	vec3 lightDir = normalize(light.position - fragPos);
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = light.diffuse * diff * material.diffuse;

	// Specular light
	float specularStrength = 0.5;
	vec3 viewDir = normalize(viewPos - fragPos);
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
	vec3 specular = light.specular * spec * material.specular;

	// Rough shadows ----------------------------------------------------------------------------
	vec3 roughProjCoords = roughFragPosLightSpace.xyz / roughFragPosLightSpace.w;
	roughProjCoords = roughProjCoords * 0.5 + 0.5;
	float roughClosestDepth = texture(roughShadowMap, roughProjCoords.xy).r;
	float roughCurrentDepth = roughProjCoords.z;
	float roughBias = max(0.01 * (1.0 - dot(norm, lightDir)), 0.005);
	float roughShadow = (roughCurrentDepth - roughBias) > roughClosestDepth ? 1.0 : 0.0;
	
	// High res shadows ---------------------------------------------------------------------------
	vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
	projCoords = projCoords * 0.5 + 0.5;
	float closestDepth = texture(shadowMap, projCoords.xy).r;
	float currentDepth = projCoords.z;
	float bias = max(0.01 * (1.0 - dot(norm, lightDir)), 0.005);
	
	// Softening shadow edges
	float shadow = 0.0;
	vec2 texelSize = 1.0 / textureSize(shadowMap, 0);
	for (int x = -1; x <= 1; x++)
	{
		for (int y = -1; y <= 1; y++)
		{
			float pcfDepth = texture(shadowMap, projCoords.xy + vec2(x, y) * texelSize).r;
			shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;
		}
	}

	shadow /= 9.0;

	if (projCoords.z > 1.0)
		shadow = 0.0;

	vec3 lighting = vec3(0.0);

	if (roughShadow > shadow)
		lighting = (ambient + (1.0 - roughShadow) * (diffuse +	 specular));
	else
		lighting = (ambient + (1.0 - shadow) * (diffuse +	 specular));

	return lighting;
}

vec3 pointLight()
{
	vec3 norm = normalize(ourNormal);
	vec3 lightDir = normalize(light.position - fragPos);
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 reflectDir = reflect(-lightDir, norm);
	
	vec3 viewDir = normalize(viewPos - fragPos);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);

	float distance = length(light.position - fragPos);
	float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));

	vec3 ambient = light.ambient * material.diffuse;
	vec3 diffuse = light.diffuse * diff * material.diffuse;
	vec3 specular = light.specular * spec * material.specular;

	ambient *= attenuation;
	diffuse *= attenuation;
	specular *= attenuation;

	return ambient + specular + diffuse;
}

void main()
{
	vec3 objectColor;
	vec3 lightColor = vec3(1.0, 1.0, 1.0);
	
	if (textured > 0)
	{
		vec4 texColor = texture(texture_diffuse1, ourTexCoord);
		objectColor = vec3(texColor.x, texColor.y, texColor.z);
	}
	else
	{
		objectColor = material.diffuse;
	}

	vec3 result = dirLight();// + pointLight();

	// Phong light model
	vec3 phong = result * objectColor;

	// Final
	fragColor = vec4(phong, 1.0);
}